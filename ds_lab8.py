# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D2kxYzADMn7jtxzV7LyqvORwWC7opvvs
"""

from multiprocessing import Process, Pipe
from os import getpid
from datetime import datetime

def local_time(counter):
    return ' (LAMPORT_TIME={}, LOCAL_TIME={})'.format(counter,
                                                     datetime.now())

def calc_recv_timestamp(recv_time_stamp, counter):
    for id  in range(len(counter)):
        counter[id] = max(recv_time_stamp[id], counter[id])
    return counter

def event(pid, counter):
    counter[pid] += 1
    print('Something happened in {} !'.\
          format(pid) + local_time(counter))
    return counter

def send_message(pipe, pid, counter):
    counter[pid] += 1
    pipe.send(('Empty shell', counter))
    print('Message sent from ' + str(pid) + local_time(counter))
    return counter

def recv_message(pipe, pid, counter):
    message, timestamp = pipe.recv()
    counter = calc_recv_timestamp(timestamp, counter)
    print('Message received at ' + str(pid)  + local_time(counter))
    return counter

def process_a(a_to_b):
    pid = 0
    counter = [0,0,0]
    counter = send_message(a_to_b, pid, counter)
    counter = event(pid, counter)
    counter = event(pid, counter)
    counter = send_message(a_to_b, pid, counter)
    counter = event(pid, counter)
    counter = recv_message(a_to_b, pid, counter)
    counter = recv_message(a_to_b, pid, counter)

def process_b(b_to_a, b_to_c):
    pid = 1
    counter = [0,0,0]
    counter = recv_message(b_to_c, pid, counter)
    counter = recv_message(b_to_c, pid, counter)
    counter = recv_message(b_to_a, pid, counter)
    counter = event(pid, counter)
    counter = send_message(b_to_c, pid, counter)
    counter = recv_message(b_to_a, pid, counter)
    counter = send_message(b_to_a, pid, counter)
    counter = send_message(b_to_a, pid, counter)


def process_c(c_to_b):
    pid = 2
    counter = [0,0,0]
    counter = send_message(c_to_b, pid, counter)
    counter = event(pid, counter)
    counter = send_message(c_to_b, pid, counter)
    counter = recv_message(c_to_b, pid, counter)

if __name__ == '__main__':
    a_to_b, b_to_a = Pipe()
    b_to_c, c_to_b = Pipe()

    processa = Process(target=process_a, 
                       args=(a_to_b,))
    processb = Process(target=process_b, 
                       args=(b_to_a, b_to_c))
    processc = Process(target=process_c, 
                       args=(c_to_b,))

    processa.start()
    processb.start()
    processc.start()

    processa.join()
    processb.join()
    processc.join()